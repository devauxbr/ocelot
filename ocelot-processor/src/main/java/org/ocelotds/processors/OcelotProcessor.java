/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */
package org.ocelotds.processors;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileWriter;
import org.ocelotds.annotations.DataService;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.Writer;
import java.util.Map;
import java.util.Set;
import javax.annotation.processing.AbstractProcessor;
import javax.annotation.processing.Filer;
import javax.annotation.processing.Messager;
import javax.annotation.processing.ProcessingEnvironment;
import javax.annotation.processing.RoundEnvironment;
import javax.annotation.processing.SupportedAnnotationTypes;
import javax.annotation.processing.SupportedOptions;
import javax.annotation.processing.SupportedSourceVersion;
import javax.lang.model.SourceVersion;
import javax.lang.model.element.Element;
import javax.lang.model.element.ElementVisitor;
import javax.lang.model.element.TypeElement;
import javax.tools.Diagnostic;
import javax.tools.FileObject;
import javax.tools.StandardLocation;
import org.ocelotds.Constants;
import org.ocelotds.frameworks.Frameworks;
import org.ocelotds.frameworks.NoFwk;
import org.ocelotds.frameworks.angularjs.BodyWriter;

/**
 * Processor of annotation org.ocelotds.annotations.DataService
 *
 * @author hhfrancois
 */
@SupportedAnnotationTypes(value = {ProcessorConstants.DATASERVICE_AT})
@SupportedSourceVersion(SourceVersion.RELEASE_7)
@SupportedOptions({ProcessorConstants.DIRECTORY, ProcessorConstants.FRAMEWORK})
public class OcelotProcessor extends AbstractProcessor {

	private static boolean done = false;

	static boolean isDone() {
		return done;
	}

	static void setDone(boolean done) {
		OcelotProcessor.done = done;
	}

	/**
	 * Tools for access filesystem
	 */
	private Filer filer;

	/**
	 * Tools for log processor
	 */
	private Messager messager;

	/**
	 * Directory where save js stub
	 */
	private String jsdir = null;

	private ElementVisitor visitorNofwk;
	private ElementVisitor visitorFwk;
	private Frameworks jsfwk;

	/**
	 * Init processor<br>
	 * get filer, messager<br>
	 * get options
	 *
	 */
	@Override
	public void init(ProcessingEnvironment processingEnv) {
		super.init(processingEnv);
		messager = processingEnv.getMessager();
		filer = processingEnv.getFiler();
		jsdir = getJsDirectory(processingEnv.getOptions());
		visitorNofwk = getNoFrameworkVisitor();
		jsfwk = getJsFramework(processingEnv.getOptions());
		visitorFwk = getJsFrameworkVisitor(jsfwk);
	}

	/**
	 * Return the default visitor, for no framework
	 *
	 * @return
	 */
	ElementVisitor getNoFrameworkVisitor() {
		return new DataServiceVisitorJsBuilder(processingEnv, new NoFwk());
	}

	/**
	 * Return specific visitor
	 *
	 * @param promiseCreatorScript
	 * @return
	 */
	ElementVisitor getJsFrameworkVisitor(Frameworks jsfwk) {
		return new DataServiceVisitorJsBuilder(processingEnv, jsfwk.fwkWriter());
	}

	/**
	 * Get optional javascript framework
	 *
	 * @param options
	 * @return
	 */
	Frameworks getJsFramework(Map<String, String> options) {
		if (null != options) {
			if (options.containsKey(ProcessorConstants.FRAMEWORK)) {
				try {
					return Frameworks.valueOf(options.get(ProcessorConstants.FRAMEWORK));
				} catch (NullPointerException | IllegalArgumentException e) {
				}
			}
		}
		return Frameworks.NOFWK;
	}

	/**
	 * Get optional output directory
	 *
	 * @param options
	 * @return
	 */
	String getJsDirectory(Map<String, String> options) {
		if (null != options) {
			if (options.containsKey(ProcessorConstants.DIRECTORY)) {
				return options.get(ProcessorConstants.DIRECTORY);
			}
		}
		return null;
	}

	@Override
	public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv) {
		// check if process was done on previous round
		if (OcelotProcessor.isDone() || roundEnv.processingOver()) { // Returns true if types generated by this round will not be subject to a subsequent round of annotation processing; returns false otherwise.
			return true; //if is it : stop
		}
		copyFileToClassOutput("ocelot-core-min.js");
		copyFileToClassOutput("ocelot-core.js");
		copyFileToClassOutput("promiseFactory.js");
		if(jsdir!=null) { // if developper specify a directory for get js we write them too inside jsdir 
			if(Frameworks.ANGULARJS.equals(jsfwk)) {
				copyFilesToFile("angularjs", jsdir, "ocelot.core.js", "promiseFactory.js", "ocelot.services.js", "hash.js", "ocelot.core.js", "subscriberFactory.js");
//				copyFileToDir("angularjs", "hash.js", jsdir);
//				copyFileToDir("angularjs", "ocelot.core.js", jsdir);
//				copyFileToDir("angularjs", "ocelot.services.js", jsdir);
//				copyFileToDir("angularjs", "promiseFactory.js", jsdir);
//				copyFileToDir("angularjs", "subscriberFactory.js", jsdir);
			} else {
				copyFileToDir("nofwk", "OcelotController.js", jsdir);
				copyFileToDir("nofwk", "OcelotServices.js", jsdir);
				copyFileToDir("nofwk", "hash.js", jsdir);
				copyFileToDir("nofwk", "promiseFactory.js", jsdir);
				copyFileToDir("nofwk", "subscriberFactory.js", jsdir);
			}
		}
		for (Element element : roundEnv.getElementsAnnotatedWith(DataService.class)) {
			processElement(element);
		}
		OcelotProcessor.setDone(true);
		return true;
	}

	private void copyFilesToFile(String fwk, String dir, String target, String... filenames) {
		try (Writer writer = getFileObjectWriter("org.ocelotds", target, dir+File.separatorChar)) {
			for (String filename : filenames) {
				messager.printMessage(Diagnostic.Kind.MANDATORY_WARNING, " javascript copy js : "+filename+" to : "+dir);
				BodyWriter.write(writer, OcelotProcessor.class.getResourceAsStream("/js"+File.separatorChar+fwk+File.separatorChar+filename));
			}
		} catch (IOException ex) {
			messager.printMessage(Diagnostic.Kind.MANDATORY_WARNING, " FAILED TO CREATE : "+target);
		}
		
	}
	private void copyFileToDir(String fwk, String filename, String dir) {
		messager.printMessage(Diagnostic.Kind.MANDATORY_WARNING, " javascript copy js : "+filename+" to : "+dir);
		try (Writer writer = getFileObjectWriter("org.ocelotds", filename, dir+File.separatorChar)) {
			BodyWriter.write(writer, OcelotProcessor.class.getResourceAsStream("/js"+File.separatorChar+fwk+File.separatorChar+filename));
		} catch (IOException ex) {
			messager.printMessage(Diagnostic.Kind.MANDATORY_WARNING, " FAILED TO CREATE : "+filename);
		}
	}

	private void copyFileToClassOutput(String filename) {
		messager.printMessage(Diagnostic.Kind.MANDATORY_WARNING, " javascript copy js : "+filename+" to : class dir");
		try (Writer writer = getResourceFileObjectWriter("", filename)) {
			BodyWriter.write(writer, OcelotProcessor.class.getResourceAsStream("/js"+File.separatorChar+filename));
		} catch (IOException ex) {
			messager.printMessage(Diagnostic.Kind.MANDATORY_WARNING, " FAILED TO CREATE : "+filename);
		}
	}

	/**
	 * Process element, filter TypeElement only
	 *
	 * @param element
	 */
	public void processElement(Element element) {
		if (TypeElement.class.isInstance(element)) {
			processTypeElement((TypeElement) element);
		}
	}

	/**
	 * Process TypeElement
	 *
	 * @param element
	 */
	public void processTypeElement(TypeElement element) {
		String packagePath = getPackagePath(element);
		String fn = getFilename(element);
		messager.printMessage(Diagnostic.Kind.MANDATORY_WARNING, " javascript generation class : " + element);
		writeJsFileToJsDir(element, visitorFwk, packagePath, fn, jsdir);
		writeJsFile(element, visitorNofwk, packagePath, fn);
	}

	void writeJsFile(TypeElement element, ElementVisitor visitor, String packagePath, String fn) {
		try (Writer w = getResourceFileObjectWriter(packagePath, fn)) {
			element.accept(visitor, w);
		} catch (IOException ioe) {
			messager.printMessage(Diagnostic.Kind.MANDATORY_WARNING, " FAILED TO CREATE : " + packagePath + "." + fn);
		}
	}

	void writeJsFileToJsDir(TypeElement element, ElementVisitor visitor, String packagePath, String fn, String dir) {
		if (null != dir) {
			try (Writer w = getFileObjectWriter(packagePath, fn, dir+File.separatorChar+"srvs")) {
				messager.printMessage(Diagnostic.Kind.MANDATORY_WARNING, " javascript generation class : " + element + " to : "+dir);
				element.accept(visitor, w);
			} catch (IOException ioe) {
				messager.printMessage(Diagnostic.Kind.MANDATORY_WARNING, " FAILED TO CREATE : " + packagePath + "." + fn);
			}
		}
	}

	/**
	 * Get pachage name of class
	 *
	 * @param te
	 * @return
	 */
	String getPackagePath(TypeElement te) {
		return te.getQualifiedName().toString().replaceAll("." + te.getSimpleName(), "");
	}

	/**
	 * Get Js filename from class
	 *
	 * @param te
	 * @return
	 */
	String getFilename(TypeElement te) {
		return te.getSimpleName().toString() + Constants.JS;
	}

	/**
	 * Create writer from filer
	 *
	 * @param name
	 * @return
	 * @throws IOException
	 */
	Writer getSourceFileObjectWriter(String name) throws IOException {
		FileObject source = filer.createSourceFile(name);
		return source.openWriter();
	}

	/**
	 * Create writer from filer
	 *
	 * @param name
	 * @return
	 * @throws IOException
	 */
	Writer getResourceFileObjectWriter(String pkg, String name) throws IOException {
		FileObject resource = filer.createResource(StandardLocation.CLASS_OUTPUT, pkg, name);
		return resource.openWriter();
	}

	/**
	 * Create writer from filer
	 *
	 * @param name
	 * @return
	 * @throws IOException
	 */
	Writer getFileObjectWriter(String pkg, String name, String dirname) throws IOException {
		File dir = new File(dirname);
		if (!dir.exists()) {
			dir.mkdirs();
		}
		return new FileWriter(new File(dir, pkg + "." + name));
	}
}
