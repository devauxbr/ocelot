/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */
package org.ocelotds.processors;

import java.io.File;
import org.ocelotds.annotations.DataService;
import java.io.IOException;
import java.io.Writer;
import java.util.Random;
import java.util.Set;
import javax.annotation.processing.AbstractProcessor;
import javax.annotation.processing.Filer;
import javax.annotation.processing.Messager;
import javax.annotation.processing.ProcessingEnvironment;
import javax.annotation.processing.RoundEnvironment;
import javax.annotation.processing.SupportedAnnotationTypes;
import javax.annotation.processing.SupportedSourceVersion;
import javax.lang.model.SourceVersion;
import javax.lang.model.element.Element;
import javax.lang.model.element.ElementVisitor;
import javax.lang.model.element.TypeElement;
import javax.tools.Diagnostic;
import javax.tools.FileObject;
import javax.tools.StandardLocation;
import org.ocelotds.Constants;

/**
 * Processor of annotation org.ocelotds.annotations.DataService
 *
 * @author hhfrancois
 */
@SupportedAnnotationTypes(value = {OcelotProcessor.DATASERVICE_AT})
@SupportedSourceVersion(SourceVersion.RELEASE_7)
public class OcelotProcessor extends AbstractProcessor {

	public final static String DATASERVICE_AT = "org.ocelotds.annotations.DataService";
	private final static Random RANDOM = new Random();
	private static boolean done = false;

	static boolean isDone() {
		return done;
	}

	static void setDone(boolean done) {
		OcelotProcessor.done = done;
	}

	/**
	 * Tools for access filesystem
	 */
	private Filer filer;

	/**
	 * Tools for log processor
	 */
	private Messager messager;

	/**
	 * Init processor<br>
	 * get filer, messager<br>
	 * get options
	 *
	 */
	@Override
	public void init(ProcessingEnvironment processingEnv) {
		super.init(processingEnv);
		messager = processingEnv.getMessager();
		filer = processingEnv.getFiler();
	}

	@Override
	public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv) {
		// check if process was done on previous round
		if (OcelotProcessor.isDone() || roundEnv.processingOver()) { // Returns true if types generated by this round will not be subject to a subsequent round of annotation processing; returns false otherwise.
			return true; //if is it : stop
		}
		ElementVisitor visitor = new DataServiceVisitorJsBuilder(processingEnv);
		for (Element element : roundEnv.getElementsAnnotatedWith(DataService.class)) {
			processElement(element, visitor);
		}
		OcelotProcessor.setDone(true);
		return true;
	}
	
	public void processElement(Element element, ElementVisitor visitor) {
		messager.printMessage(Diagnostic.Kind.WARNING, " javascript generation class : " + element);
		if(TypeElement.class.isInstance(element)) {
			processTypeElement((TypeElement) element, visitor);
		}
	}
	
	public void processTypeElement(TypeElement element, ElementVisitor visitor) {
		String fn = getFilename(element);
		try (Writer w = getResourceFileObjectWriter(fn)) {
			element.accept(visitor, w);				
		} catch(IOException ioe) {
			messager.printMessage(Diagnostic.Kind.WARNING, " FAILED TO CREATE : " + fn);
		}
	}
	String getFilename(TypeElement te) {
		return te.getQualifiedName().toString().replaceAll("\\.", File.separator)+Constants.JS;
	}

	/**
	 * Create writer from filer
	 *
	 * @param name
	 * @return
	 * @throws IOException
	 */
	Writer getSourceFileObjectWriter(String name) throws IOException {
		FileObject source = filer.createSourceFile(name);
		return source.openWriter();
	}

	/**
	 * Create writer from filer
	 *
	 * @param name
	 * @return
	 * @throws IOException
	 */
	Writer getResourceFileObjectWriter(String name) throws IOException {
//			System.out.println(""+resourcejs.toUri().getPath());
//			File file = new File("D:\\Development\\Workspaces\\ocelot-project\\ocelotds.org\\ocelotds.web\\src\\main\\webapp\\test.js");
//			return new FileWriter(file);
		FileObject resource = filer.createResource(StandardLocation.CLASS_OUTPUT, "", name);
		return resource.openWriter();
	}
}
